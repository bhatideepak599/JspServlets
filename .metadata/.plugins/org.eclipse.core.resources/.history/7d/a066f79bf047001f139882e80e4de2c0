package com.bank.controller;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import javax.annotation.Resource;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;
import com.bank.model.Customer;
import com.bank.model.CustomerDAO;
import com.bank.model.Transaction;
import com.bank.model.TransactionDAO;

@WebServlet("/CustomerController")
public class CustomerController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	private CustomerDAO customerDbUtil;
	private TransactionDAO transactionDbUtil;

	@Resource(name = "jdbc/bank")
	private DataSource dataSource;

	@Override
	public void init() throws ServletException {
		super.init();
		customerDbUtil = new CustomerDAO(dataSource);
		transactionDbUtil = new TransactionDAO(dataSource);
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String action = request.getParameter("action");
		if (action == null) {
			action = "home";
		}

		try {
			switch (action) {
				case "listPassbook":
					listPassbook(request, response);
					break;
				case "newTransaction":
					newTransaction(request, response);
					break;
				case "addTransaction":
					addTransaction(request, response);
					break;
				case "viewCustomer":
					viewCustomer(request, response);
					break;
				case "updateCustomer":
					updateCustomer(request, response);
					break;
				case "editCustomer":
					editCustomer(request, response);
					break;
				default:
					customerHome(request, response);
					break;
			}
		} catch (SQLException | IOException | ServletException e) {
			throw new ServletException(e);
		}
	}

	private void viewCustomer(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		RequestDispatcher requestDispatcher = request.getRequestDispatcher("edit-profile.jsp");
		requestDispatcher.forward(request, response);
	}

	private void listPassbook(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String userName = request.getParameter("user_name");
		List<Transaction> transactions = transactionDbUtil.getTransactionsForCustomer(userName);
		request.setAttribute("theTransactionList", transactions);
		RequestDispatcher requestDispatcher = request.getRequestDispatcher("view-passbook.jsp");
		requestDispatcher.forward(request, response);
	}

	private void newTransaction(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String userName = request.getParameter("user_name");
		String accountNumber = customerDbUtil.getAccountNumber(userName);
		request.setAttribute("senderAccountNumber", accountNumber);
		RequestDispatcher requestDispatcher = request.getRequestDispatcher("new-transaction.jsp");
		requestDispatcher.forward(request, response);
	}

	private void addTransaction(HttpServletRequest request, HttpServletResponse response)
			throws SQLException, IOException {
		String sender = request.getParameter("senderAccountNumber");
		String receiver = request.getParameter("receiverAccountNumber");
		double amount = Double.parseDouble(request.getParameter("amount"));
		Transaction transaction = new Transaction(sender, receiver, amount);

		if (transactionDbUtil.receiverAccountExists(receiver) && transactionDbUtil.amountExists(amount, sender)) {
			transactionDbUtil.creditAmount(receiver, amount);
			transactionDbUtil.debitAmount(amount, sender);
			transactionDbUtil.addTransaction(transaction);

			String userName = request.getParameter("user_name");
			HttpSession session = request.getSession();
			session.setAttribute("user_name", userName);
			session.setAttribute("customerDetails", customerDbUtil.getCustomer(userName)); // Store customer details
			response.sendRedirect("customer-home.jsp");
		} 
	}

	private void editCustomer(HttpServletRequest request, HttpServletResponse response)
			throws IOException, ServletException {
		int id = Integer.parseInt(request.getParameter("id"));
		Customer customer = new Customer();
		customer.setFirstName(request.getParameter("firstName"));
		customer.setLastName(request.getParameter("lastName"));
		customer.setEmail(request.getParameter("email"));
		customer.setPassword(request.getParameter("password"));
		customer.setId(id);

		boolean updated = customerDbUtil.editCustomer(customer);
		if (updated) {
			String userName = request.getParameter("user_name");
			HttpSession session = request.getSession();
			session.setAttribute("user_name", userName);
			session.setAttribute("customerDetails", customerDbUtil.getCustomer(userName)); // Store customer details
			response.sendRedirect("customer-home.jsp");
		} else {
			// Handle error case if needed
		}
	}

	private void updateCustomer(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String email = request.getParameter("user_name");
		Customer customer = customerDbUtil.getCustomer(email);
		request.setAttribute("theCustomer", customer);
		RequestDispatcher requestDispatcher = request.getRequestDispatcher("edit-profile.jsp");
		requestDispatcher.forward(request, response);
	}

	private void customerHome(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session=request.getSession();
		String user_name = (String) session.getAttribute("user_name");
		request.setAttribute("user_name", user_name);
		RequestDispatcher requestDispatcher = request.getRequestDispatcher("customer-home.jsp");
		requestDispatcher.forward(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doGet(request, response);
	}
}
