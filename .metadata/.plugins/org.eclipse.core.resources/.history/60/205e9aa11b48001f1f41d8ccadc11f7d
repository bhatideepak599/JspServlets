package com.bank.model;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

public class TransactionDAO {
	private DataSource dataSource;

	public TransactionDAO(DataSource dataSource) {
		this.dataSource = dataSource;
	}

	public List<Transaction> listTransactions() {

		List<Transaction> transactions = new ArrayList<Transaction>();
		try {

			Connection conn = dataSource.getConnection();
			Statement stmt = conn.createStatement();
			String sql = "select * from transactions";

			ResultSet rs = stmt.executeQuery(sql);

			while (rs.next()) {
				Transaction transaction = new Transaction();

				transaction.setId(rs.getInt(1));
				transaction.setSenderAccNo(rs.getString(2));
				transaction.setReceiverAccNo(rs.getString(3));
				transaction.setType(rs.getString(4));
				transaction.setAmount(rs.getDouble(5));
				transaction.setDate(rs.getDate(6));

				transactions.add(transaction);

			}
		} catch (SQLException e) {

			e.printStackTrace();
		}

		return transactions;

	}

	public List<Transaction> getTransactionsForCustomer(String user_name) {
		List<Transaction> transactions = new ArrayList<Transaction>();
		transactions = getDebitTransactionsForCustomer(user_name);
		List<Transaction> transactions2 = new ArrayList<Transaction>();
		transactions2 = getCreditTransactionsForCustomer(user_name);
		transactions.addAll(transactions2);
		return transactions;
	}

	public List<Transaction> getDebitTransactionsForCustomer(String user_name) {
		List<Transaction> transactions = new ArrayList<Transaction>();
		try {
			System.out.println(user_name);
			Connection con = dataSource.getConnection();

			String sql = "select * from transactions t join customers c on t.senderAccNo=c.accountNumber where c.email = ?;";

			PreparedStatement stmt = con.prepareStatement(sql);

			stmt.setString(1, user_name);

			ResultSet rs = stmt.executeQuery();

			while (rs.next()) {
				int id = rs.getInt("id");
				String senderAccount_number = rs.getString("senderAccNo");
				String recAccount_number = rs.getString("receiverAccNo");
				Date date = rs.getDate("date");
				int amount = rs.getInt("amount");
				String type = "debit";

				Transaction transaction = new Transaction(id, senderAccount_number, recAccount_number, type, amount,
						date);
				transactions.add(transaction);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return transactions;
	}

	public List<Transaction> getCreditTransactionsForCustomer(String user_name) {
		List<Transaction> transactions = new ArrayList<Transaction>();
		try {
			System.out.println(user_name);
			Connection con = dataSource.getConnection();

			String sql = "select * from transactions t join customers c on t.receiverAccNo=c.accountNumber where c.email = ?;";

			PreparedStatement stmt = con.prepareStatement(sql);

			stmt.setString(1, user_name);

			ResultSet rs = stmt.executeQuery();

			while (rs.next()) {
				int id = rs.getInt("id");
				String senderAccount_number = rs.getString("senderAccNo");
				String recAccount_number = rs.getString("receiverAccNo");
				Date date = rs.getDate("date");
				double amount = rs.getDouble("amount");
				String type = "credit";
				Transaction transaction = new Transaction();
				transaction.setSenderAccNo(senderAccount_number);
				transaction.setReceiverAccNo(recAccount_number);
				transaction.setType(type);
				transaction.setAmount(amount);

				transaction.setId(id);
				transaction.setDate(date);
				transactions.add(transaction);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return transactions;
	}

	public void addTransaction(Transaction transaction) throws SQLException {

		Connection con = dataSource.getConnection();
		String sql = "insert into transactions (senderAccNo,receiverAccNo,amount ) values(?,?,?)";
		PreparedStatement stmt = con.prepareStatement(sql);

		stmt.setString(1, transaction.getSenderAccNo());
		stmt.setString(2, transaction.getReceiverAccNo());
		stmt.setDouble(3, transaction.getAmount());

		 stmt.executeUpdate();

	}

	public boolean amountExists(double amount, String sender) throws SQLException {
		Connection con = dataSource.getConnection();
		String sql = "select * from customers where accountNumber = ?";
		PreparedStatement stmt = con.prepareStatement(sql);

		stmt.setString(1, sender);
		ResultSet rs = stmt.executeQuery();
		while (rs.next()) {
			double balance = rs.getDouble(7);
			if (balance >= amount) {
				return true;
			}
			return false;
		}
		return false;
	}

	public boolean receiverAccountExists(String receiver) throws SQLException {
		Connection con = dataSource.getConnection();
		String sql = "select * from customers where accountNumber = ?";
		PreparedStatement stmt = con.prepareStatement(sql);

		stmt.setString(1, receiver);
		ResultSet rs = stmt.executeQuery();
		if (rs != null) {
			return true;
		}
		return false;
	}

	public void creditAmount(String receiver, double amount) throws SQLException {

		Connection con = dataSource.getConnection();
		String sql = "select * from customers where accountNumber = ?";
		PreparedStatement stmt = con.prepareStatement(sql);

		stmt.setString(1, receiver);
		ResultSet rs = stmt.executeQuery();
		while (rs.next()) {
			double balance = rs.getDouble(7) + amount;
			String sql1 = "update customers set balance=? where accountNumber = ?";
			PreparedStatement stmt1 = con.prepareStatement(sql1);
			stmt1.setDouble(1, balance);
			stmt1.setString(2, receiver);
			// System.out.println(balance);
			stmt1.executeUpdate();
			// System.out.println(balance);
			return;
		}
	}

	public void debitAmount(double amount, String sender) throws SQLException {
		Connection con = dataSource.getConnection();
		String sql = "select * from customers where accountNumber = ?";
		PreparedStatement stmt = con.prepareStatement(sql);

		stmt.setString(1, sender);
		ResultSet rs = stmt.executeQuery();
		while (rs.next()) {
			double balance = rs.getDouble("balance") - amount;
			String sql1 = "update customers set balance=? where accountNumber = ?";
			PreparedStatement stmt1 = con.prepareStatement(sql1);
			stmt1.setDouble(1, balance);
			stmt1.setString(2, sender);
			// System.out.println(balance);
			stmt1.executeUpdate();
			return;
		}

	}

}
